Dumping std::__throw_domain_error:
[0;1;32mFunctionDecl[0m[0;33m 0x550ff08[0m <[0;33m/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/functexcept.h:65:3[0m, [0;33mline:66:65[0m> [0;33mcol:3[0m[0;1;36m __throw_domain_error[0m [0;32m'void (const char *) __attribute__((noreturn))'[0m
[0;34m`-[0m[0;1;32mParmVarDecl[0m[0;33m 0x550fe78[0m <[0;33mcol:24[0m, [0;33mcol:34[0m> [0;33mcol:35[0m [0;32m'const char *'[0m

Dumping __remainder:
[0;1;32mVarDecl[0m[0;33m 0x57a0178[0m <[0;33m/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/stl_algo.h:297:7[0m, [0;33mcol:35[0m> [0;33mcol:21[0m referenced[0;1;36m __remainder[0m [0;32m'_DistanceType':'typename std::iterator_traits<_RandomAccessIter>::difference_type'[0m cinit
[0;34m`-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x57a01e0[0m <[0;33mcol:35[0m> [0;32m'_Integer'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mParmVar[0m[0;33m 0x579fa70[0m[0;1;36m '__count'[0m [0;32m'_Integer'[0m

Dumping __remaining:
[0;1;32mParmVarDecl[0m[0;33m 0x5b53448[0m <[0;33m/usr/include/time.h:212:9[0m, [0;33mcol:26[0m> [0;33mcol:26[0m[0;1;36m __remaining[0m [0;32m'struct timespec *'[0m

Dumping std::domain_error:
[0;1;32mCXXRecordDecl[0m[0;33m 0x5d53318[0m <[0;33m/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/stdexcept:147:3[0m, [0;33mline:155:3[0m> [0;33mline:147:9[0m class[0;1;36m domain_error[0m definition
[0;34m|-[0m[0;1;32mDefinitionData[0m polymorphic has_user_declared_ctor can_const_default_init
[0;34m| |-[0m[0;1;32mDefaultConstructor[0m
[0;34m| |-[0m[0;1;32mCopyConstructor[0m simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
[0;34m| |-[0m[0;1;32mMoveConstructor[0m needs_overload_resolution
[0;34m| |-[0m[0;1;32mCopyAssignment[0m non_trivial has_const_param implicit_has_const_param
[0;34m| |-[0m[0;1;32mMoveAssignment[0m needs_overload_resolution
[0;34m| `-[0m[0;1;32mDestructor[0m non_trivial user_declared needs_overload_resolution
[0;34m|-[0mpublic [0;32m'std::logic_error'[0m
[0;34m|-[0m[0;1;32mCXXRecordDecl[0m[0;33m 0x5d53478[0m <[0;33mcol:3[0m, [0;33mcol:9[0m> [0;33mcol:9[0m implicit referenced class[0;1;36m domain_error[0m
[0;34m|-[0m[0;1;32mAccessSpecDecl[0m[0;33m 0x5d53508[0m <[0;33mline:149:3[0m, [0;33mcol:9[0m> [0;33mcol:3[0m public
[0;34m|-[0m[0;1;32mCXXConstructorDecl[0m[0;33m 0x5d53618[0m <[0;33mline:150:5[0m, [0;33mcol:46[0m> [0;33mcol:14[0m[0;1;36m domain_error[0m [0;32m'void (const std::__cxx11::string &)'[0m
[0;34m| `-[0m[0;1;32mParmVarDecl[0m[0;33m 0x5d53540[0m <[0;33mcol:27[0m, [0;33mcol:41[0m> [0;33mcol:41[0m[0;1;36m __arg[0m [0;32m'const std::__cxx11::string &'[0m
[0;34m|-[0m[0;1;32mCXXConstructorDecl[0m[0;33m 0x5d53770[0m <[0;33mline:152:5[0m, [0;33mcol:38[0m> [0;33mcol:14[0m[0;1;36m domain_error[0m [0;32m'void (const char *)'[0m
[0;34m| `-[0m[0;1;32mParmVarDecl[0m[0;33m 0x5d536e0[0m <[0;33mcol:27[0m, [0;33mcol:37[0m> [0;33mcol:38[0m [0;32m'const char *'[0m
[0;34m|-[0m[0;1;32mCXXDestructorDecl[0m[0;33m 0x5d53870[0m <[0;33mline:154:5[0m, [0;33m/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h:138:33[0m> [0;33m/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/stdexcept:154:13[0m[0;1;36m ~domain_error[0m [0;32m'void () noexcept'[0m virtual
[0;34m| `-[0mOverrides: [ 0x5d53168 logic_error::~logic_error 'void () noexcept' ]
[0;34m|-[0m[0;1;32mCXXConstructorDecl[0m[0;33m 0x5d53948[0m <[0;33mline:147:9[0m> [0;33mcol:9[0m implicit[0;1;36m domain_error[0m [0;32m'void (const std::domain_error &)'[0m inline default noexcept-unevaluated 0x5d53948
[0;34m| `-[0m[0;1;32mParmVarDecl[0m[0;33m 0x5d53a58[0m <[0;33mcol:9[0m> [0;33mcol:9[0m [0;32m'const std::domain_error &'[0m
[0;34m`-[0m[0;1;32mCXXMethodDecl[0m[0;33m 0x5d53af8[0m <[0;33mcol:9[0m> [0;33mcol:9[0m implicit[0;1;36m operator=[0m [0;32m'std::domain_error &(const std::domain_error &)'[0m inline default noexcept-unevaluated 0x5d53af8
[0;34m  `-[0m[0;1;32mParmVarDecl[0m[0;33m 0x5d53c08[0m <[0;33mcol:9[0m> [0;33mcol:9[0m [0;32m'const std::domain_error &'[0m

Dumping main:
[0;1;32mFunctionDecl[0m[0;33m 0x5f58d98[0m <[0;33m/home/tunde/Linux/Documents/Projekt/Part_II/Clang_GJam/data/AEtheReal/2974486_5709773144064000_AEtheReal.cpp:20:1[0m, [0;33mline:35:1[0m> [0;33mline:20:5[0m[0;1;36m main[0m [0;32m'int ()'[0m
[0;34m`-[0m[0;1;35mCompoundStmt[0m[0;33m 0x5f5a720[0m <[0;33mcol:12[0m, [0;33mline:35:1[0m>
[0;34m  |-[0m[0;1;35mDeclStmt[0m[0;33m 0x5f58eb8[0m <[0;33mline:21:1[0m, [0;33mcol:7[0m>
[0;34m  | `-[0m[0;1;32mVarDecl[0m[0;33m 0x5f58e50[0m <[0;33mcol:1[0m, [0;33mcol:5[0m> [0;33mcol:5[0m used[0;1;36m nt[0m [0;32m'int'[0m
[0;34m  |-[0m[0;1;35mCallExpr[0m[0;33m 0x5f59000[0m <[0;33mcol:9[0m, [0;33mcol:24[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m
[0;34m  | |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f58fe8[0m <[0;33mcol:9[0m> [0;32m'int (*)(const char *__restrict, ...)'[0m[0;36m[0m[0;36m[0m <[0;31mFunctionToPointerDecay[0m>
[0;34m  | | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f58f70[0m <[0;33mcol:9[0m> [0;32m'int (const char *__restrict, ...)'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mFunction[0m[0;33m 0x5362340[0m[0;1;36m 'scanf'[0m [0;32m'int (const char *__restrict, ...)'[0m
[0;34m  | |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f59030[0m <[0;33mcol:15[0m> [0;32m'const char *'[0m[0;36m[0m[0;36m[0m <[0;31mArrayToPointerDecay[0m>
[0;34m  | | `-[0m[0;1;35mStringLiteral[0m[0;33m 0x5f58f18[0m <[0;33mcol:15[0m> [0;32m'const char [3]'[0m[0;36m lvalue[0m[0;36m[0m[0;1;36m "%d"[0m
[0;34m  | `-[0m[0;1;35mUnaryOperator[0m[0;33m 0x5f58f58[0m <[0;33mcol:21[0m, [0;33mcol:22[0m> [0;32m'int *'[0m[0;36m[0m[0;36m[0m prefix '&' cannot overflow
[0;34m  |   `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f58f38[0m <[0;33mcol:22[0m> [0;32m'int'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f58e50[0m[0;1;36m 'nt'[0m [0;32m'int'[0m
[0;34m  |-[0m[0;1;35mForStmt[0m[0;33m 0x5f5a6b8[0m <[0;33mline:11:20[0m, [0;33mline:33:1[0m>
[0;34m  | |-[0m[0;1;35mDeclStmt[0m[0;33m 0x5f59108[0m <[0;33mline:11:24[0m, [0;33mcol:33[0m>
[0;34m  | | `-[0m[0;1;32mVarDecl[0m[0;33m 0x5f59060[0m <[0;33mcol:24[0m, [0;33mcol:32[0m> [0;33mline:21:31[0m used[0;1;36m tt[0m [0;32m'int'[0m cinit
[0;34m  | |   `-[0m[0;1;35mParenExpr[0m[0;33m 0x5f590e8[0m <[0;33mline:11:30[0m, [0;33mcol:32[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m
[0;34m  | |     `-[0m[0;1;35mIntegerLiteral[0m[0;33m 0x5f590c8[0m <[0;33mline:21:34[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m[0;1;36m 1[0m
[0;34m  | |-[0m[0;34m<<<NULL>>>[0m
[0;34m  | |-[0m[0;1;35mBinaryOperator[0m[0;33m 0x5f59250[0m <[0;33mcol:31[0m, [0;33mline:11:43[0m> [0;32m'bool'[0m[0;36m[0m[0;36m[0m '<'
[0;34m  | | |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f59238[0m <[0;33mline:21:31[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m <[0;31mLValueToRValue[0m>
[0;34m  | | | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f59120[0m <[0;33mcol:31[0m> [0;32m'int'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f59060[0m[0;1;36m 'tt'[0m [0;32m'int'[0m
[0;34m  | | `-[0m[0;1;35mCStyleCastExpr[0m[0;33m 0x5f59210[0m <[0;33mline:11:36[0m, [0;33mcol:43[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m <[0;31mNoOp[0m>
[0;34m  | |   `-[0m[0;1;35mParenExpr[0m[0;33m 0x5f591f0[0m <[0;33mcol:41[0m, [0;33mcol:43[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m
[0;34m  | |     `-[0m[0;1;35mBinaryOperator[0m[0;33m 0x5f59198[0m <[0;33mline:21:36[0m, [0;33mcol:39[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m '+'
[0;34m  | |       |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f59180[0m <[0;33mcol:36[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m <[0;31mLValueToRValue[0m>
[0;34m  | |       | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f59140[0m <[0;33mcol:36[0m> [0;32m'int'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f58e50[0m[0;1;36m 'nt'[0m [0;32m'int'[0m
[0;34m  | |       `-[0m[0;1;35mIntegerLiteral[0m[0;33m 0x5f59160[0m <[0;33mcol:39[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m[0;1;36m 1[0m
[0;34m  | |-[0m[0;1;35mUnaryOperator[0m[0;33m 0x5f59290[0m <[0;33mcol:31[0m, [0;33mline:11:46[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m postfix '++'
[0;34m  | | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f59270[0m <[0;33mline:21:31[0m> [0;32m'int'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f59060[0m[0;1;36m 'tt'[0m [0;32m'int'[0m
[0;34m  | `-[0m[0;1;35mCompoundStmt[0m[0;33m 0x5f5a678[0m <[0;33mcol:41[0m, [0;33mline:33:1[0m>
[0;34m  |   |-[0m[0;1;35mDeclStmt[0m[0;33m 0x5f59448[0m <[0;33mline:22:2[0m, [0;33mcol:14[0m>
[0;34m  |   | |-[0m[0;1;32mVarDecl[0m[0;33m 0x5f592c0[0m <[0;33mcol:2[0m, [0;33mcol:9[0m> [0;33mcol:9[0m used[0;1;36m c[0m [0;32m'double'[0m
[0;34m  |   | |-[0m[0;1;32mVarDecl[0m[0;33m 0x5f59340[0m <[0;33mcol:2[0m, [0;33mcol:11[0m> [0;33mcol:11[0m used[0;1;36m f[0m [0;32m'double'[0m
[0;34m  |   | `-[0m[0;1;32mVarDecl[0m[0;33m 0x5f593c0[0m <[0;33mcol:2[0m, [0;33mcol:13[0m> [0;33mcol:13[0m used[0;1;36m x[0m [0;32m'double'[0m
[0;34m  |   |-[0m[0;1;35mCallExpr[0m[0;33m 0x5f59630[0m <[0;33mline:23:2[0m, [0;33mcol:31[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m
[0;34m  |   | |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f59618[0m <[0;33mcol:2[0m> [0;32m'int (*)(const char *__restrict, ...)'[0m[0;36m[0m[0;36m[0m <[0;31mFunctionToPointerDecay[0m>
[0;34m  |   | | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f595f8[0m <[0;33mcol:2[0m> [0;32m'int (const char *__restrict, ...)'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mFunction[0m[0;33m 0x5362340[0m[0;1;36m 'scanf'[0m [0;32m'int (const char *__restrict, ...)'[0m
[0;34m  |   | |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f59670[0m <[0;33mcol:8[0m> [0;32m'const char *'[0m[0;36m[0m[0;36m[0m <[0;31mArrayToPointerDecay[0m>
[0;34m  |   | | `-[0m[0;1;35mStringLiteral[0m[0;33m 0x5f59528[0m <[0;33mcol:8[0m> [0;32m'const char [10]'[0m[0;36m lvalue[0m[0;36m[0m[0;1;36m "%lf%lf%lf"[0m
[0;34m  |   | |-[0m[0;1;35mUnaryOperator[0m[0;33m 0x5f59570[0m <[0;33mcol:21[0m, [0;33mcol:22[0m> [0;32m'double *'[0m[0;36m[0m[0;36m[0m prefix '&' cannot overflow
[0;34m  |   | | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f59550[0m <[0;33mcol:22[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f592c0[0m[0;1;36m 'c'[0m [0;32m'double'[0m
[0;34m  |   | |-[0m[0;1;35mUnaryOperator[0m[0;33m 0x5f595a8[0m <[0;33mcol:25[0m, [0;33mcol:26[0m> [0;32m'double *'[0m[0;36m[0m[0;36m[0m prefix '&' cannot overflow
[0;34m  |   | | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f59588[0m <[0;33mcol:26[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f59340[0m[0;1;36m 'f'[0m [0;32m'double'[0m
[0;34m  |   | `-[0m[0;1;35mUnaryOperator[0m[0;33m 0x5f595e0[0m <[0;33mcol:29[0m, [0;33mcol:30[0m> [0;32m'double *'[0m[0;36m[0m[0;36m[0m prefix '&' cannot overflow
[0;34m  |   |   `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f595c0[0m <[0;33mcol:30[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f593c0[0m[0;1;36m 'x'[0m [0;32m'double'[0m
[0;34m  |   |-[0m[0;1;35mDeclStmt[0m[0;33m 0x5f597e0[0m <[0;33mline:24:2[0m, [0;33mcol:25[0m>
[0;34m  |   | |-[0m[0;1;32mVarDecl[0m[0;33m 0x5f596a0[0m <[0;33mcol:2[0m, [0;33mcol:13[0m> [0;33mcol:9[0m used[0;1;36m t[0m [0;32m'double'[0m cinit
[0;34m  |   | | `-[0m[0;1;35mFloatingLiteral[0m[0;33m 0x5f59708[0m <[0;33mcol:13[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m[0;1;36m 0.000000e+00[0m
[0;34m  |   | `-[0m[0;1;32mVarDecl[0m[0;33m 0x5f59740[0m <[0;33mcol:2[0m, [0;33mcol:22[0m> [0;33mcol:18[0m used[0;1;36m r[0m [0;32m'double'[0m cinit
[0;34m  |   |   `-[0m[0;1;35mFloatingLiteral[0m[0;33m 0x5f597a8[0m <[0;33mcol:22[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m[0;1;36m 2.000000e+00[0m
[0;34m  |   |-[0m[0;1;35mDeclStmt[0m[0;33m 0x5f59898[0m <[0;33mline:25:2[0m, [0;33mcol:19[0m>
[0;34m  |   | `-[0m[0;1;32mVarDecl[0m[0;33m 0x5f59810[0m <[0;33mcol:2[0m, [0;33mcol:15[0m> [0;33mcol:9[0m used[0;1;36m ans[0m [0;32m'double'[0m cinit
[0;34m  |   |   `-[0m[0;1;35mFloatingLiteral[0m[0;33m 0x5f59878[0m <[0;33mcol:15[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m[0;1;36m 1.000000e+50[0m
[0;34m  |   |-[0m[0;1;35mForStmt[0m[0;33m 0x5f5a4d8[0m <[0;33mline:11:20[0m, [0;33mline:31:2[0m>
[0;34m  |   | |-[0m[0;1;35mDeclStmt[0m[0;33m 0x5f59970[0m <[0;33mline:11:24[0m, [0;33mcol:33[0m>
[0;34m  |   | | `-[0m[0;1;32mVarDecl[0m[0;33m 0x5f598c8[0m <[0;33mcol:24[0m, [0;33mcol:32[0m> [0;33mline:26:6[0m used[0;1;36m i[0m [0;32m'int'[0m cinit
[0;34m  |   | |   `-[0m[0;1;35mParenExpr[0m[0;33m 0x5f59950[0m <[0;33mline:11:30[0m, [0;33mcol:32[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m
[0;34m  |   | |     `-[0m[0;1;35mIntegerLiteral[0m[0;33m 0x5f59930[0m <[0;33mline:26:8[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m[0;1;36m 0[0m
[0;34m  |   | |-[0m[0;34m<<<NULL>>>[0m
[0;34m  |   | |-[0m[0;1;35mBinaryOperator[0m[0;33m 0x5f59a60[0m <[0;33mcol:6[0m, [0;33mline:11:43[0m> [0;32m'bool'[0m[0;36m[0m[0;36m[0m '<'
[0;34m  |   | | |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f59a48[0m <[0;33mline:26:6[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m <[0;31mLValueToRValue[0m>
[0;34m  |   | | | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f59988[0m <[0;33mcol:6[0m> [0;32m'int'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f598c8[0m[0;1;36m 'i'[0m [0;32m'int'[0m
[0;34m  |   | | `-[0m[0;1;35mCStyleCastExpr[0m[0;33m 0x5f59a20[0m <[0;33mline:11:36[0m, [0;33mcol:43[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m <[0;31mNoOp[0m>
[0;34m  |   | |   `-[0m[0;1;35mParenExpr[0m[0;33m 0x5f59a00[0m <[0;33mcol:41[0m, [0;33mcol:43[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m
[0;34m  |   | |     `-[0m[0;1;35mIntegerLiteral[0m[0;33m 0x5f599a8[0m <[0;33mline:26:10[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m[0;1;36m 10000000[0m
[0;34m  |   | |-[0m[0;1;35mUnaryOperator[0m[0;33m 0x5f59aa0[0m <[0;33mcol:6[0m, [0;33mline:11:46[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m postfix '++'
[0;34m  |   | | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f59a80[0m <[0;33mline:26:6[0m> [0;32m'int'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f598c8[0m[0;1;36m 'i'[0m [0;32m'int'[0m
[0;34m  |   | `-[0m[0;1;35mCompoundStmt[0m[0;33m 0x5f5a4a8[0m <[0;33mcol:19[0m, [0;33mline:31:2[0m>
[0;34m  |   |   |-[0m[0;1;35mExprWithCleanups[0m[0;33m 0x5f5a278[0m <[0;33mline:27:3[0m, [0;33mcol:27[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m
[0;34m  |   |   | `-[0m[0;1;35mBinaryOperator[0m[0;33m 0x5f5a258[0m <[0;33mcol:3[0m, [0;33mcol:27[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m '='
[0;34m  |   |   |   |-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f59ab8[0m <[0;33mcol:3[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f59810[0m[0;1;36m 'ans'[0m [0;32m'double'[0m
[0;34m  |   |   |   `-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f5a240[0m <[0;33mcol:9[0m, [0;33mcol:27[0m> [0;32m'double':'double'[0m[0;36m[0m[0;36m[0m <[0;31mLValueToRValue[0m>
[0;34m  |   |   |     `-[0m[0;1;35mCallExpr[0m[0;33m 0x5f5a1e0[0m <[0;33mcol:9[0m, [0;33mcol:27[0m> [0;32m'const double':'const double'[0m[0;36m lvalue[0m[0;36m[0m
[0;34m  |   |   |       |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f5a1c8[0m <[0;33mcol:9[0m> [0;32m'const double &(*)(const double &, const double &)'[0m[0;36m[0m[0;36m[0m <[0;31mFunctionToPointerDecay[0m>
[0;34m  |   |   |       | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f59fb0[0m <[0;33mcol:9[0m> [0;32m'const double &(const double &, const double &)'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mFunction[0m[0;33m 0x5f59e78[0m[0;1;36m 'min'[0m [0;32m'const double &(const double &, const double &)'[0m ([0;1;32mFunctionTemplate[0m[0;33m 0x5686498[0m[0;1;36m 'min'[0m)
[0;34m  |   |   |       |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f5a210[0m <[0;33mcol:13[0m> [0;32m'const double'[0m[0;36m lvalue[0m[0;36m[0m <[0;31mNoOp[0m>
[0;34m  |   |   |       | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f59b38[0m <[0;33mcol:13[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f59810[0m[0;1;36m 'ans'[0m [0;32m'double'[0m
[0;34m  |   |   |       `-[0m[0;1;35mMaterializeTemporaryExpr[0m[0;33m 0x5f5a228[0m <[0;33mcol:18[0m, [0;33mcol:26[0m> [0;32m'const double':'const double'[0m[0;36m lvalue[0m[0;36m[0m
[0;34m  |   |   |         `-[0m[0;1;35mBinaryOperator[0m[0;33m 0x5f59c20[0m <[0;33mcol:18[0m, [0;33mcol:26[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m '+'
[0;34m  |   |   |           |-[0m[0;1;35mBinaryOperator[0m[0;33m 0x5f59bc8[0m <[0;33mcol:18[0m, [0;33mcol:22[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m '/'
[0;34m  |   |   |           | |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f59b98[0m <[0;33mcol:18[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m <[0;31mLValueToRValue[0m>
[0;34m  |   |   |           | | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f59b58[0m <[0;33mcol:18[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f593c0[0m[0;1;36m 'x'[0m [0;32m'double'[0m
[0;34m  |   |   |           | `-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f59bb0[0m <[0;33mcol:22[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m <[0;31mLValueToRValue[0m>
[0;34m  |   |   |           |   `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f59b78[0m <[0;33mcol:22[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f59740[0m[0;1;36m 'r'[0m [0;32m'double'[0m
[0;34m  |   |   |           `-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f59c08[0m <[0;33mcol:26[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m <[0;31mLValueToRValue[0m>
[0;34m  |   |   |             `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f59be8[0m <[0;33mcol:26[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f596a0[0m[0;1;36m 't'[0m [0;32m'double'[0m
[0;34m  |   |   |-[0m[0;1;35mCompoundAssignOperator[0m[0;33m 0x5f5a340[0m <[0;33mline:28:3[0m, [0;33mcol:10[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m '+=' ComputeLHSTy=[0;32m'double'[0m ComputeResultTy=[0;32m'double'[0m
[0;34m  |   |   | |-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f5a290[0m <[0;33mcol:3[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f596a0[0m[0;1;36m 't'[0m [0;32m'double'[0m
[0;34m  |   |   | `-[0m[0;1;35mBinaryOperator[0m[0;33m 0x5f5a320[0m <[0;33mcol:8[0m, [0;33mcol:10[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m '/'
[0;34m  |   |   |   |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f5a2f0[0m <[0;33mcol:8[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m <[0;31mLValueToRValue[0m>
[0;34m  |   |   |   | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f5a2b0[0m <[0;33mcol:8[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f592c0[0m[0;1;36m 'c'[0m [0;32m'double'[0m
[0;34m  |   |   |   `-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f5a308[0m <[0;33mcol:10[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m <[0;31mLValueToRValue[0m>
[0;34m  |   |   |     `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f5a2d0[0m <[0;33mcol:10[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f59740[0m[0;1;36m 'r'[0m [0;32m'double'[0m
[0;34m  |   |   |-[0m[0;1;35mCompoundAssignOperator[0m[0;33m 0x5f5a3c8[0m <[0;33mline:29:3[0m, [0;33mcol:8[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m '+=' ComputeLHSTy=[0;32m'double'[0m ComputeResultTy=[0;32m'double'[0m
[0;34m  |   |   | |-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f5a370[0m <[0;33mcol:3[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f59740[0m[0;1;36m 'r'[0m [0;32m'double'[0m
[0;34m  |   |   | `-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f5a3b0[0m <[0;33mcol:8[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m <[0;31mLValueToRValue[0m>
[0;34m  |   |   |   `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f5a390[0m <[0;33mcol:8[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f59340[0m[0;1;36m 'f'[0m [0;32m'double'[0m
[0;34m  |   |   `-[0m[0;1;35mIfStmt[0m[0;33m 0x5f5a490[0m <[0;33mline:30:3[0m, [0;33mcol:15[0m>
[0;34m  |   |     |-[0m[0;1;35mBinaryOperator[0m[0;33m 0x5f5a468[0m <[0;33mcol:6[0m, [0;33mcol:10[0m> [0;32m'bool'[0m[0;36m[0m[0;36m[0m '>'
[0;34m  |   |     | |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f5a438[0m <[0;33mcol:6[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m <[0;31mLValueToRValue[0m>
[0;34m  |   |     | | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f5a3f8[0m <[0;33mcol:6[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f596a0[0m[0;1;36m 't'[0m [0;32m'double'[0m
[0;34m  |   |     | `-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f5a450[0m <[0;33mcol:10[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m <[0;31mLValueToRValue[0m>
[0;34m  |   |     |   `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f5a418[0m <[0;33mcol:10[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f59810[0m[0;1;36m 'ans'[0m [0;32m'double'[0m
[0;34m  |   |     `-[0m[0;1;35mBreakStmt[0m[0;33m 0x5f5a488[0m <[0;33mcol:15[0m>
[0;34m  |   `-[0m[0;1;35mCallExpr[0m[0;33m 0x5f5a5f8[0m <[0;33mline:32:2[0m, [0;33mcol:36[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m
[0;34m  |     |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f5a5e0[0m <[0;33mcol:2[0m> [0;32m'int (*)(const char *__restrict, ...)'[0m[0;36m[0m[0;36m[0m <[0;31mFunctionToPointerDecay[0m>
[0;34m  |     | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f5a5c0[0m <[0;33mcol:2[0m> [0;32m'int (const char *__restrict, ...)'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mFunction[0m[0;33m 0x535eb60[0m[0;1;36m 'printf'[0m [0;32m'int (const char *__restrict, ...)'[0m
[0;34m  |     |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f5a630[0m <[0;33mcol:9[0m> [0;32m'const char *'[0m[0;36m[0m[0;36m[0m <[0;31mArrayToPointerDecay[0m>
[0;34m  |     | `-[0m[0;1;35mStringLiteral[0m[0;33m 0x5f5a558[0m <[0;33mcol:9[0m> [0;32m'const char [16]'[0m[0;36m lvalue[0m[0;36m[0m[0;1;36m "Case #%d: %.7f\n"[0m
[0;34m  |     |-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f5a648[0m <[0;33mcol:29[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m <[0;31mLValueToRValue[0m>
[0;34m  |     | `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f5a580[0m <[0;33mcol:29[0m> [0;32m'int'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f59060[0m[0;1;36m 'tt'[0m [0;32m'int'[0m
[0;34m  |     `-[0m[0;1;35mImplicitCastExpr[0m[0;33m 0x5f5a660[0m <[0;33mcol:33[0m> [0;32m'double'[0m[0;36m[0m[0;36m[0m <[0;31mLValueToRValue[0m>
[0;34m  |       `-[0m[0;1;35mDeclRefExpr[0m[0;33m 0x5f5a5a0[0m <[0;33mcol:33[0m> [0;32m'double'[0m[0;36m lvalue[0m[0;36m[0m [0;1;32mVar[0m[0;33m 0x5f59810[0m[0;1;36m 'ans'[0m [0;32m'double'[0m
[0;34m  `-[0m[0;1;35mReturnStmt[0m[0;33m 0x5f5a710[0m <[0;33mline:34:1[0m, [0;33mcol:8[0m>
[0;34m    `-[0m[0;1;35mIntegerLiteral[0m[0;33m 0x5f5a6f0[0m <[0;33mcol:8[0m> [0;32m'int'[0m[0;36m[0m[0;36m[0m[0;1;36m 0[0m

